openapi: 3.0.0
info:
  title: KevBot API
  description: API for managing KevBot tracks, playlists, and more!
  version: 1.0.0
components:
  schemas:
    Playlist:
      properties:
        id:
          type: string
        name:
          type: string
        dt_created:
          format: date-time
          type: string
        user_id:
          type: integer
        tracks:
          items:
            $ref: "#/components/schemas/Track"
          type: array
      type: object
    Track:
      properties:
        id:
          type: integer
        name:
          type: string
        dt_created:
          format: date-time
          type: string
        user_id:
          type: integer
        duration:
          type: number
      type: object
  securitySchemes:
    bearerAuth:
      bearerFormat: JWT
      scheme: bearer
      type: http
paths:
  # todo: review login
  /login:
    post:
      requestBody:
        content:
          application/json:
            schema:
              properties:
                password:
                  type: string
                username:
                  type: string
              required:
                - username
                - password
              type: object
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  token:
                    type: string
                type: object
          description: JWT token retrieved
      summary: Login and retrieve a JWT token
  # todo: review playlists
  /playlists:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Playlist"
                type: array
          description: List of playlists
      summary: Retrieve a list of playlists
    post:
      requestBody:
        content:
          application/json:
            schema:
              properties:
                name:
                  type: string
                tracks:
                  items:
                    type: string
                  type: array
              required:
                - name
              type: object
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Playlist"
          description: Playlist created
      security:
        - bearerAuth: []
      summary: Create a new playlist
  # todo: review search
  /search:
    get:
      parameters:
        - in: query
          name: query
          required: true
          schema:
            type: string
        - in: query
          name: type
          schema:
            enum:
              - track
              - playlist
            type: string
        - in: query
          name: artist
          schema:
            type: string
        - in: query
          name: album
          schema:
            type: string
        - in: query
          name: genre
          schema:
            type: string
        - in: query
          name: name
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  oneOf:
                    - $ref: "#/components/schemas/Track"
                    - $ref: "#/components/schemas/Playlist"
                type: array
          description: Search results
      summary: Search for tracks or playlists
  /tracks:
    get:
      parameters:
        - in: query
          name: name
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Track"
                type: array
          description: List of tracks
      summary: Retrieve a list of available tracks
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Track"
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Track"
          description: Track uploaded
      security:
        - bearerAuth: []
      summary: Upload a new track
  /tracks/{id}:
    delete:
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Track deleted
      security:
        - bearerAuth: []
      summary: Delete a track
    get:
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Track"
          description: Track metadata
      summary: Retrieve metadata for a specific track
    patch:
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                title:
                  type: string
              type: object
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Track"
          description: Track metadata updated
      security:
        - bearerAuth: []
      summary: Update track metadata
  /tracks/{id}/download:
    get:
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Track download initiated
      summary: Download a specific track
  /tracks/{id}/stream:
    get:
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Track stream initiated
      summary: Stream a specific track
  /users/{id}:
    get:
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  created_at:
                    format: date-time
                    type: string
                  email:
                    type: string
                  id:
                    type: string
                  username:
                    type: string
                type: object
          description: User profile information
      summary: Retrieve user profile information
  /users/{id}/history:
    get:
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Track"
                type: array
          description: User's listening history
      summary: Retrieve the user's listening history
  /users/{id}/playlists:
    get:
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Playlist"
                type: array
          description: List of user's playlists
      summary: Retrieve the user's playlists
  /users/{id}/tracks:
    get:
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Track"
                type: array
          description: List of tracks associated with the user
      summary: Retrieve tracks associated with the user
security:
  - bearerAuth: []
servers:
  - url: https://api.example.com/v1
